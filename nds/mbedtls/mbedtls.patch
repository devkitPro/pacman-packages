diff --git a/Makefile b/Makefile
index 5b2ad16..73fcb0a 100644
--- a/Makefile
+++ b/Makefile
@@ -55,7 +55,7 @@ $(VISUALC_FILES):
 	$(PERL) scripts/generate_visualc_files.pl
 
 ifndef WINDOWS
-install: no_test
+install: lib
 	mkdir -p $(DESTDIR)/include/mbedtls
 	cp -rp include/mbedtls $(DESTDIR)/include
 	mkdir -p $(DESTDIR)/include/psa
diff --git a/include/mbedtls/mbedtls_config.h b/include/mbedtls/mbedtls_config.h
index 0558ee0..0e04e45 100644
--- a/include/mbedtls/mbedtls_config.h
+++ b/include/mbedtls/mbedtls_config.h
@@ -467,7 +467,7 @@
  *
  * Uncomment to use your own hardware entropy collector.
  */
-//#define MBEDTLS_ENTROPY_HARDWARE_ALT
+#define MBEDTLS_ENTROPY_HARDWARE_ALT
 
 /**
  * \def MBEDTLS_AES_ROM_TABLES
@@ -1027,7 +1027,7 @@
  *
  * Uncomment this macro to disable the built-in platform entropy functions.
  */
-//#define MBEDTLS_NO_PLATFORM_ENTROPY
+#define MBEDTLS_NO_PLATFORM_ENTROPY
 
 /**
  * \def MBEDTLS_ENTROPY_FORCE_SHA256
@@ -2604,7 +2604,7 @@
  *
  * This module enables abstraction of common (libc) functions.
  */
-#define MBEDTLS_PLATFORM_C
+// #define MBEDTLS_PLATFORM_C
 
 /**
  * \def MBEDTLS_POLY1305_C
@@ -2850,7 +2850,7 @@
  *
  * This module is required for SSL/TLS server support.
  */
-#define MBEDTLS_SSL_SRV_C
+// #define MBEDTLS_SSL_SRV_C
 
 /**
  * \def MBEDTLS_SSL_TLS_C
diff a/library/entropy_poll.c b/library/entropy_poll.c
--- a/library/entropy_poll.c
+++ b/library/entropy_poll.c
@@ -234,4 +234,65 @@ int mbedtls_nv_seed_poll( void *data,
 }
 #endif /* MBEDTLS_ENTROPY_NV_SEED */
 
+
+#ifdef __NDS__
+
+// libnds platform functions for entropy
+
+/*
+ * Seeder that uses libnds microphone access.
+ */
+
+#include <nds.h>
+#include <stdio.h>
+#include "mbedtls/entropy.h"
+
+static volatile int mic_done = 0;
+static void* volatile mic_buffer_loc;
+
+void seeder_nds_mic_callback(void* data, int length)
+{
+    ((void) length);
+    if(data != mic_buffer_loc)
+    {
+        soundMicOff();
+        mic_done = 1;
+    }
+}
+
+int mbedtls_hardware_poll( void *data, unsigned char *output, size_t len,
+                           size_t *olen )
+{
+    ((void) data);
+    *olen = 0;
+
+    mic_buffer_loc = output;
+    mic_done = 0;
+
+    // start recording from mic
+    if(!soundMicRecord(mic_buffer_loc, len, MicFormat_8Bit, 16000, seeder_nds_mic_callback))
+    {
+        return 0;
+    }
+
+    int irq_count = 0;
+
+    while(!mic_done)
+    {
+        if(irq_count == 60)
+        {
+            soundMicOff();
+            return( MBEDTLS_ERR_ENTROPY_SOURCE_FAILED );
+        }
+        swiWaitForVBlank();
+        irq_count++;
+    }
+
+    *olen = len;
+
+    return( 0 );
+}
+
+#endif // #ifdef __NDS__
+
 #endif /* MBEDTLS_ENTROPY_C */
diff --git a/library/net_sockets.c b/library/net_sockets.c
index 17a9e4a..781eb95 100644
--- a/library/net_sockets.c
+++ b/library/net_sockets.c
@@ -33,7 +33,7 @@
 
 #if !defined(unix) && !defined(__unix__) && !defined(__unix) && \
     !defined(__APPLE__) && !defined(_WIN32) && !defined(__QNXNTO__) && \
-    !defined(__HAIKU__) && !defined(__midipix__)
+    !defined(__HAIKU__) && !defined(__midipix__) && !defined(__NDS__)
 #error "This module only works on Unix and Windows, see MBEDTLS_NET_C in mbedtls_config.h"
 #endif
 
@@ -168,6 +168,7 @@ void mbedtls_net_init( mbedtls_net_context *ctx )
     ctx->fd = -1;
 }
 
+#ifndef __NDS__ // getaddrinfo doesn't work on NDS
 /*
  * Initiate a TCP connection with host:port and the given protocol
  */
@@ -287,6 +288,7 @@ int mbedtls_net_bind( mbedtls_net_context *ctx, const char *bind_ip, const char
     return( ret );
 
 }
+#endif // #ifndef __NDS__ // getaddrinfo doesn't work on NDS
 
 #if ( defined(_WIN32) || defined(_WIN32_WCE) ) && !defined(EFIX64) && \
     !defined(EFI32)
@@ -333,6 +335,7 @@ static int net_would_block( const mbedtls_net_context *ctx )
 }
 #endif /* ( _WIN32 || _WIN32_WCE ) && !EFIX64 && !EFI32 */
 
+#ifndef __NDS__ // IPv6 doesn't work on NDS
 /*
  * Accept a connection from a remote client
  */
@@ -451,6 +454,7 @@ int mbedtls_net_accept( mbedtls_net_context *bind_ctx,
 
     return( 0 );
 }
+#endif // #ifndef __NDS__ // IPv6 doesn't work on NDS
 
 /*
  * Set the socket blocking or non-blocking
@@ -576,7 +580,11 @@ int mbedtls_net_recv( void *ctx, unsigned char *buf, size_t len )
     if( ret != 0 )
         return( ret );
 
+#ifndef __NDS__
     ret = (int) read( fd, buf, len );
+#else
+    ret = (int) recv( fd, buf, len, 0 );
+#endif
 
     if( ret < 0 )
     {
@@ -658,7 +666,11 @@ int mbedtls_net_send( void *ctx, const unsigned char *buf, size_t len )
     if( ret != 0 )
         return( ret );
 
+#ifndef __NDS__
     ret = (int) write( fd, buf, len );
+#else
+    ret = (int) send( fd, buf, len, 0 );
+#endif
 
     if( ret < 0 )
     {
diff --git a/library/timing.c b/library/timing.c
index 8a02c00..9fc6b6b 100644
--- a/library/timing.c
+++ b/library/timing.c
@@ -27,7 +27,7 @@
 
 #if !defined(unix) && !defined(__unix__) && !defined(__unix) && \
     !defined(__APPLE__) && !defined(_WIN32) && !defined(__QNXNTO__) && \
-    !defined(__HAIKU__) && !defined(__midipix__)
+    !defined(__HAIKU__) && !defined(__midipix__) && !defined(__NDS__)
 #error "This module only works on Unix and Windows, see MBEDTLS_TIMING_C in mbedtls_config.h"
 #endif
 
