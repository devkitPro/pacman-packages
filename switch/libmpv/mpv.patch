From 6737971847b55c193d5eca4104293fec18178348 Mon Sep 17 00:00:00 2001
From: dragonflylee <dragonflylee@outlook.com>
Date: Thu, 7 Sep 2023 06:02:20 +0000
Subject: [PATCH] switch specific fix for tx1 hwdec

---
 meson.build             |  9 +++++++--
 osdep/io.c              |  2 +-
 osdep/io.h              |  2 +-
 osdep/switch/sys/mman.h | 15 +++++++++++++++
 sub/filter_regex.c      |  2 +-
 video/mp_image.c        |  2 +-
 video/mp_image.h        |  2 +-
 7 files changed, 27 insertions(+), 7 deletions(-)
 create mode 100644 osdep/switch/sys/mman.h

diff --git a/meson.build b/meson.build
index 8a4a904b77..2cc660ee2e 100644
--- a/meson.build
+++ b/meson.build
@@ -298,7 +298,8 @@ endif
 
 darwin = host_machine.system() == 'darwin'
 win32 = host_machine.system() == 'cygwin' or host_machine.system() == 'windows'
-posix = not win32
+hos = host_machine.system() == 'horizon'
+posix = not (win32 or hos)
 
 features += {'darwin': darwin}
 features += {'posix': posix}
@@ -400,6 +401,10 @@ if posix
                      'sub/filter_regex.c')
 endif
 
+if hos
+    path_source = files('osdep/path-unix.c')
+endif
+
 if posix and not features['cocoa']
     sources += files('osdep/main-fn-unix.c',
                      'osdep/language-posix.c')
@@ -410,7 +415,7 @@ if darwin
     timer_source = files('osdep/timer-darwin.c')
 endif
 
-if posix and not darwin
+if (posix or hos) and not darwin
     timer_source = files('osdep/timer-linux.c')
 endif
 
diff --git a/osdep/io.c b/osdep/io.c
index bdf79f8894..f34344f13b 100644
--- a/osdep/io.c
+++ b/osdep/io.c
@@ -62,7 +62,7 @@ bool mp_set_cloexec(int fd)
     return true;
 }
 
-#ifdef __MINGW32__
+#if defined(__MINGW32__) || defined(__SWITCH__)
 int mp_make_cloexec_pipe(int pipes[2])
 {
     pipes[0] = pipes[1] = -1;
diff --git a/osdep/io.h b/osdep/io.h
index db711fb265..8487ab0c43 100644
--- a/osdep/io.h
+++ b/osdep/io.h
@@ -221,7 +221,7 @@ void freelocale(locale_t);
 
 #else /* __MINGW32__ */
 
-#include <sys/mman.h>
+#include "switch/sys/mman.h"
 
 extern char **environ;
 
diff --git a/osdep/switch/sys/mman.h b/osdep/switch/sys/mman.h
new file mode 100644
index 0000000000..398ff01729
--- /dev/null
+++ b/osdep/switch/sys/mman.h
@@ -0,0 +1,15 @@
+#ifndef _MEMMAP_H_
+#define _MEMMAP_H_
+
+#include <stdio.h>
+#include <stdint.h>
+
+#define PROT_READ       0x1
+#define PROT_WRITE      0x2
+#define MAP_SHARED      0x01
+#define MAP_FAILED      ((void *) -1)
+
+#define mmap(a, b, c, d, e, f) malloc(b)
+#define munmap(a, b) free(a)
+
+#endif
diff --git a/sub/filter_regex.c b/sub/filter_regex.c
index 8e299918ce..c7b08f5273 100644
--- a/sub/filter_regex.c
+++ b/sub/filter_regex.c
@@ -1,5 +1,5 @@
-#include <regex.h>
 #include <sys/types.h>
+#include <regex.h>
 
 #include "common/common.h"
 #include "common/msg.h"
diff --git a/video/mp_image.c b/video/mp_image.c
index dff2051d39..d5b579b8ae 100644
--- a/video/mp_image.c
+++ b/video/mp_image.c
@@ -178,7 +178,7 @@ static bool mp_image_alloc_planes(struct mp_image *mpi)
         return false;
 
     // Note: mp_image_pool assumes this creates only 1 AVBufferRef.
-    mpi->bufs[0] = av_buffer_alloc(size + align);
+    mpi->bufs[0] = av_buffer_aligned_alloc(size + align, 0x100); // Aligmnent required for plane offsets
     if (!mpi->bufs[0])
         return false;
 
diff --git a/video/mp_image.h b/video/mp_image.h
index 0408aab3df..6a9320562f 100644
--- a/video/mp_image.h
+++ b/video/mp_image.h
@@ -32,7 +32,7 @@
 // libraries except libavcodec don't really know what alignment they want.
 // Things will randomly crash or get slower if the alignment is not satisfied.
 // Whatever. This value should be pretty safe with current CPU architectures.
-#define MP_IMAGE_BYTE_ALIGN 64
+#define MP_IMAGE_BYTE_ALIGN 256 // VIC alignement
 
 #define MP_IMGFIELD_TOP_FIRST 0x02
 #define MP_IMGFIELD_REPEAT_FIRST 0x04
